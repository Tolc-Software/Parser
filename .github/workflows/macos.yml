name: MacOS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  BUILD_TYPE: Release

jobs:
  build:

    runs-on: macOS-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip macos]')"

    steps:
    - uses: actions/checkout@v2

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Python cache
      uses: actions/cache@v2
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-refreshed-at-20200621-1
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Download python dependencies
      run: |
        python -m pip install setuptools wheel
        python -m pip install conan ninja

    - name: Conan cache
      uses: actions/cache@v2
      with:
        path: ~/.conan
        key: ${{ runner.os }}-conan-refreshed-at-20200716
        restore-keys: |
          ${{ runner.os }}-conan-

    - name: Configure
      env:
        CC: /usr/local/opt/llvm/bin/clang
        CXX: /usr/local/opt/llvm/bin/clang++
      run: |
        cmake -S. -Bbuild -G Ninja -DCMAKE_CXX_COMPILER="/usr/local/opt/llvm/bin/clang++" -DCMAKE_C_COMPILER="/usr/local/opt/llvm/bin/clang" -DCMAKE_BUILD_TYPE="Release" -DENABLE_TESTING=ON -DENABLE_PACKAGING=ON

    - name: Build
      run: cmake --build build -j4

    - name: Run tests
      run: |
        cd build
        ctest --cores 4 --output-on-failure

    - name: Build the release tar.xz package
      if: github.ref == 'refs/heads/main'
      run: cpack -G TXZ --config build/CPackConfig.cmake

    - name: Setup go
      if: github.ref == 'refs/heads/main'
      uses: actions/setup-go@v2
      with:
        go-version: '1.14'

    - name: Setup go cache
      if: github.ref == 'refs/heads/main'
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Push main release
      if: github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        go get -v github.com/github-release/github-release
        echo "Checking if a new release is needed"
        github-release release --user Tolc-Software --repo Parser --tag main-release --name "Head release" --description "This release gets updated with each commit to main" || true
        echo "Pushing the release"
        github-release upload --user Tolc-Software --repo Parser --tag main-release --name "Parser-$(uname)-main.tar.xz" --file Parser-*.tar.xz --replace

