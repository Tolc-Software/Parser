name: Windows-debug-deploy

on:
  push:
    branches:
      - main


jobs:
  build:

    runs-on: windows-2019
    env:
      VCVARS: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat

    steps:

    - name: Pull down to C disk
      shell: cmd
      run: |
        git clone https://Tolc-Software:${{ secrets.ACCESS_TOKEN }}@github.com/Tolc-Software/Parser.git C:\Repo

    - uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Python cache
      uses: actions/cache@v2
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-refreshed-at-20200621-1
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Download python dependencies
      working-directory: C:\Repo
      run: |
        python -m pip install setuptools wheel
        python -m pip install conan ninja

    - name: Conan cache
      uses: actions/cache@v2
      with:
        path: ~/.conan
        key: ${{ runner.os }}-conan-refreshed-at-20200716
        restore-keys: |
          ${{ runner.os }}-conan-

    - name: Configure
      working-directory: C:\Repo
      shell: cmd
      run: |
        call "%VCVARS%"
        cmake -S. -Bbuild -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DENABLE_PACKAGING=ON -DCMAKE_BUILD_TYPE=Debug -DCPACK_PACKAGE_FILE_NAME=Parser -G Ninja

    - name: Build
      working-directory: C:\Repo
      shell: cmd
      run: |
        call "%VCVARS%"
        cmake --build build -j4

    - name: Build the release tar.xz package
      if: github.ref == 'refs/heads/main'
      working-directory: C:\Repo
      shell: cmd
      run: |
        call "%VCVARS%"
        cpack -G TXZ --config build/CPackConfig.cmake

    - name: Push release
      if: github.ref == 'refs/heads/main'
      working-directory: C:\Repo
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        # Move to keep the directory on Github Actions free from filename clashes
        mv Parser.tar.xz Parser-Windows-main-Debug.tar.xz

        echo "Pushing to the latest tag"
        gh release create latest --title "Latest release from main" --notes "This release gets updated on each commit to main" || true
        gh release upload latest Parser-Windows-main-Debug.tar.xz --clobber

        version="$(cat docs/ReleaseNotes/version)"
        # Move to keep the directory on Github Actions free from filename clashes
        mv Parser-Windows-main-Debug.tar.xz Parser-Windows-${version}-Debug.tar.xz

        echo "Making sure the release ${version} is online"
        gh release create "${version}" --title "${version}" --notes-file "docs/ReleaseNotes/${version}.md" || true
        gh release upload "${version}" Parser-Windows-${version}-Debug.tar.xz || true

